{"name":"Cobbler","tagline":"A C Object System","body":"Cobbler: A C Object System\r\n=======\r\n\r\nCobbler is an attempt to add objects to the C language in order to better understand the implementations of different kinds of object systems.\r\n\r\nA primitive static object system is being developed using just C Macros and functions.\r\n\r\nA dynamic object system library will also be created using a C framework.\r\n\r\n##Goals\r\n\r\n###A Static Primitive Object System\r\n\r\n- To create a simple static object system with simple data inheritance using pure C.\r\n- To better understand the usage of C Macros.\r\n- To better understand implementations of static object systems (such as that of C++).\r\n- To add a type of inherited struct that implements reference counting.\r\n\r\n###A Dynamic Object System\r\n\r\n- To create a simple dynamic object system framework with data and method inheritance using pure C.\r\n- To better understand dynamic object system implementations that take advantage of message passing.\r\n- To better understand meta-programming in dynamic object systems.\r\n\r\n###Desired Features\r\n\r\n- To implement ordered multiple inheritance in a dynamic object system.\r\n- To add state machine behavior to a dynamic object system (such as that of the Plaid language).\r\n\r\n##Progress\r\n\r\nThe primitive static object system is seeing progress. It has not yet seen any testing, but seems to compile fine... so far.\r\nImplemented primitive objects include a linked-list primitive, string primitive, and a value/number primitive.\r\nPrimitive objects follow the reference counting memory management model, with a posix-compliant thread-safe autorelease implementation. (These are known as own, disown, and autodisown)\r\n\r\n##Things to come\r\n\r\n- Tests for the primitive static object system.\r\n- A dynamic object system framework, implemented using the primitive object system.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}